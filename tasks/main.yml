---
- name: Create greenlight directory
  file:
    state: directory
    path: "{{ greenlight_inst_dir }}"

- name: Deploy terms.md
  copy:
    content: "{{ greenlight_terms }}"
    dest: "{{ greenlight_inst_dir }}/terms.md"
  when: greenlight_terms is defined

- name: Setup greenlight docker-compose
  block:
    - name: Deploy docker-compose file
      template:
        src: docker-compose.yml.j2
        dest: "{{ greenlight_inst_dir }}/docker-compose.yml"
        mode: '640'
      notify: restart greenlight

    - name: Deploy greenlight environment file
      template:
        src: env.j2
        dest: "{{ greenlight_inst_dir }}/.env"
        mode: '640'
      notify: restart greenlight

    - name: Ensure pip is installed
      apt:
        name: python3-pip
        state: "{{ greenlight_state }}"

    - name: Launch docker-compose
      community.docker.docker_compose:
        pull: yes
        project_src: "{{ greenlight_inst_dir }}"
      when: not ansible_check_mode

    - name: wait until rake did all necessary migrations
      community.docker.docker_container_exec:
        container: greenlight-v2
        command: bundle exec rake db:abort_if_pending_migrations
      register: greenlight_rake
      until: greenlight_rake.rc == 0
      retries: 10
      when:
        - not ansible_check_mode
        - greenlight_users | length > 0

    # https://docs.bigbluebutton.org/greenlight/gl-admin.html#creating-accounts
    - name: Create greenlight users
      community.docker.docker_container_exec:
        container: greenlight-v2
        command: "bundle exec rake user:create[\"{{ item.name }}\",\"{{ item.email }}\",\"{{ item.password }}\",\"{{ item.type }}\"]"
      loop: "{{ greenlight_users | flatten(levels=1) }}"
      register: usercreate
      failed_when: "'Invalid Arguments' in usercreate.stdout"
      changed_when: "'Account successfully created' in usercreate.stdout"

  tags: greenlight-compose

- import_tasks: certificate.yml
  tags:
    - tls
    - certificates

- name: Deploy nginx reverse proxy
  block:
    - name: Install nginx
      apt:
        name: nginx

    - file:
        state: directory
        path: /etc/nginx/ssl

    - name: Generating dhparam (It takes some time !)
      shell: openssl dhparam -out /etc/nginx/ssl/dhp-4096.pem 4096
      args:
        creates: /etc/nginx/ssl/dhp-4096.pem

    - name: Deploy greenlight vhost
      template:
        src: greenlight.nginx.j2
        dest: /etc/nginx/conf.d/greenlight.conf
        validate: bash -c 'nginx -t -c /dev/stdin <<< "events {worker_connections 100;} http { include %s; }"'
      notify: restart nginx
  tags: greenlight-nginx
  when: not greenlight_bbb_share_nginx

- name: deploy greenlight nginx config as included snippet
  template:
    src: greenlight.snippet.nginx.j2
    dest: /etc/bigbluebutton/nginx/greenlight.nginx
  tags: greenlight-nginx
  when: greenlight_bbb_share_nginx
  notify: restart nginx

- name: Deploy privacy policy
  import_tasks: privacy-policy.yml
  when: greenlight_enable_privacy_policy
  tags:
    - greenlight-privacy
    - privacy
